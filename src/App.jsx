// src/App.jsx
import React, { useState, useEffect } from 'react';
import { db } from './firebase';
import { collection, getDocs, query, where } from 'firebase/firestore';
import SurveyForm from './components/SurveyForm';
import SymptomDiary from './components/SymptomDiary';
import './App.css';

// === 30 –ê–õ–õ–ï–†–ì–ï–ù–û–í ===
const ALLERGENS = [
  { key: 'birch', name: '–ë–µ—Ä—ë–∑–∞', icon: 'üå≥' },
  { key: 'alder', name: '–û–ª—å—Ö–∞', icon: 'üå≤' },
  { key: 'hazel', name: '–õ–µ—â–∏–Ω–∞', icon: 'üåø' },
  { key: 'oak', name: '–î—É–±', icon: 'üå≥' },
  { key: 'pine', name: '–°–æ—Å–Ω–∞', icon: 'üå≤' },
  { key: 'grass', name: '–ó–ª–∞–∫–∏', icon: 'üåæ' },
  { key: 'timothy', name: '–ü—ã—Ä–µ–π', icon: 'üåæ' },
  { key: 'ryegrass', name: '–†–∞–π–≥—Ä–∞—Å', icon: 'üåæ' },
  { key: 'fescue', name: '–û–≤—Å—è–Ω–∏—Ü–∞', icon: 'üåæ' },
  { key: 'wheat', name: '–ü—à–µ–Ω–∏—Ü–∞', icon: 'üåæ' },

  { key: 'ragweed', name: '–ê–º–±—Ä–æ–∑–∏—è', icon: 'üåº' },
  { key: 'mugwort', name: '–ü–æ–ª—ã–Ω—å', icon: 'üåø' },
  { key: 'nettle', name: '–ö—Ä–∞–ø–∏–≤–∞', icon: 'üåø' },
  { key: 'plantain', name: '–ü–æ–¥–æ—Ä–æ–∂–Ω–∏–∫', icon: 'üåø' },






 
  
];

// === 40 –ì–û–†–û–î–û–í –†–û–°–°–ò–ò ===
const CITIES = [
  { key: 'moscow', name: '–ú–æ—Å–∫–≤–∞' },
  { key: 'saint_petersburg', name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
  { key: 'ekaterinburg', name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' },
  { key: 'novosibirsk', name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' },
  { key: 'kazan', name: '–ö–∞–∑–∞–Ω—å' },
  { key: 'rostov_on_don', name: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É' },
  { key: 'sochi', name: '–°–æ—á–∏' },
  { key: 'vladivostok', name: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫' },
  { key: 'kaliningrad', name: '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥' },
  { key: 'nizhny_novgorod', name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥' },
  { key: 'chelyabinsk', name: '–ß–µ–ª—è–±–∏–Ω—Å–∫' },
  { key: 'samara', name: '–°–∞–º–∞—Ä–∞' },
  { key: 'omsk', name: '–û–º—Å–∫' },
  { key: 'perm', name: '–ü–µ—Ä–º—å' },
  { key: 'ufa', name: '–£—Ñ–∞' },
  { key: 'krasnoyarsk', name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫' },
  { key: 'voronezh', name: '–í–æ—Ä–æ–Ω–µ–∂' },
  { key: 'volgograd', name: '–í–æ–ª–≥–æ–≥—Ä–∞–¥' },
  { key: 'krasnodar', name: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä' },
  { key: 'saratov', name: '–°–∞—Ä–∞—Ç–æ–≤' },
  { key: 'tyumen', name: '–¢—é–º–µ–Ω—å' },
  { key: 'toliatti', name: '–¢–æ–ª—å—è—Ç—Ç–∏' },
  { key: 'izhevsk', name: '–ò–∂–µ–≤—Å–∫' },
  { key: 'barnaul', name: '–ë–∞—Ä–Ω–∞—É–ª' },
  { key: 'ulan_ude', name: '–£–ª–∞–Ω-–£–¥—ç' },
  { key: 'irkutsk', name: '–ò—Ä–∫—É—Ç—Å–∫' },
  { key: 'khabarovsk', name: '–•–∞–±–∞—Ä–æ–≤—Å–∫' },
  { key: 'yaroslavl', name: '–Ø—Ä–æ—Å–ª–∞–≤–ª—å' },
  { key: 'vladimir', name: '–í–ª–∞–¥–∏–º–∏—Ä' },
  { key: 'mahachkala', name: '–ú–∞—Ö–∞—á–∫–∞–ª–∞' },
  { key: 'tomsk', name: '–¢–æ–º—Å–∫' },
  { key: 'orenburg', name: '–û—Ä–µ–Ω–±—É—Ä–≥' },
  { key: 'kemerovo', name: '–ö–µ–º–µ—Ä–æ–≤–æ' },
  { key: 'novokuznetsk', name: '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫' },
  { key: 'ryazan', name: '–†—è–∑–∞–Ω—å' },
  { key: 'astrakhan', name: '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å' },
  { key: 'penza', name: '–ü–µ–Ω–∑–∞' },
  { key: 'lipetsk', name: '–õ–∏–ø–µ—Ü–∫' },
  { key: 'tula', name: '–¢—É–ª–∞' },
  { key: 'cheboksary', name: '–ß–µ–±–æ–∫—Å–∞—Ä—ã' },
];

function getPollenLevel(seasonStart, seasonEnd, peakDate, targetDate) {
  const now = new Date(targetDate).getTime();
  const start = new Date(seasonStart).getTime();
  const end = new Date(seasonEnd).getTime();
  const peak = new Date(peakDate).getTime();
  if (now < start || now > end) return 0;
  if (now <= peak) {
    const progress = (now - start) / (peak - start);
    return Math.min(100, Math.round(20 + progress * 80));
  } else {
    const progress = (now - peak) / (end - peak);
    return Math.max(0, Math.round(100 - progress * 80));
  }
}

export default function App() {
  const [selectedPlant, setSelectedPlant] = useState('birch');
  const [selectedCity, setSelectedCity] = useState('moscow');
  const [forecast, setForecast] = useState([]);
  const [loading, setLoading] = useState(true);
  const [recommendation, setRecommendation] = useState('');

  const currentAllergen = ALLERGENS.find(a => a.key === selectedPlant) || ALLERGENS[0];

  useEffect(() => {
    const load = async () => {
      setLoading(true);
      try {
        const q = query(
          collection(db, 'allergens'),
          where('city', '==', selectedCity),
          where('plant', '==', selectedPlant)
        );
        const snapshot = await getDocs(q);

        if (snapshot.empty) {
          setForecast([]);
          setLoading(false);
          return;
        }

        const doc = snapshot.docs[0].data();
        const today = new Date();
        let year = today.getFullYear();
        if (today > new Date(`${year}-${doc.seasonEnd}`)) year++;

        const start = `${year}-${doc.seasonStart}`;
        const end = `${year}-${doc.seasonEnd}`;
        const peak = `${year}-${doc.peakDate}`;

        const data = [];
        for (let i = 0; i < 14; i++) {
          const date = new Date(today);
          date.setDate(today.getDate() + i);
          const dateStr = date.toISOString().split('T')[0];
          const level = getPollenLevel(start, end, peak, dateStr);
          data.push({ date: dateStr, level });
        }
        setForecast(data);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
        setForecast([]);
      }
      setLoading(false);
    };

    load();
  }, [selectedPlant, selectedCity]);

  return (
    <div className="app">
      <header className="header">
        <h1>–ê–ª–ª–µ—Ä–≥–æ-–¢—Ä–µ–∫–µ—Ä</h1>
        
      </header>

      <div className="select-container">
        <div className="select-group">
          <label className="select-label">–ê–ª–ª–µ—Ä–≥–µ–Ω</label>
          <select
            value={selectedPlant}
            onChange={(e) => setSelectedPlant(e.target.value)}
            className="custom-select"
          >
            {ALLERGENS.map(a => (
              <option key={a.key} value={a.key}>
                {a.icon} {a.name}
              </option>
            ))}
          </select>
        </div>

        <div className="select-group">
          <label className="select-label">–ì–æ—Ä–æ–¥</label>
          <select
            value={selectedCity}
            onChange={(e) => setSelectedCity(e.target.value)}
            className="custom-select"
          >
            {CITIES.map(c => (
              <option key={c.key} value={c.key}>
                {c.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      <div className="graph-section">
        <h2>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 14 –¥–Ω–µ–π: {currentAllergen.name}</h2>
        {loading ? (
          <p className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        ) : (
          <div className="graph">
            <div className="bars">
              {forecast.map((day, i) => (
                <div key={i} className="bar-container">
                  <div className="bar"></div>
                  <div className="date">{day.date.slice(5)}</div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* –î–ù–ï–í–ù–ò–ö –°–ò–ú–ü–¢–û–ú–û–í */}
      <SymptomDiary />

      {/* –û–ü–†–û–° –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú */}
      <SurveyForm
        onRecommend={setRecommendation}
        selectedPlant={selectedPlant}
        selectedCity={selectedCity}
      />

      {/* –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò */}
      {recommendation && (
        <div className="recommendation-box">
          <h3>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</h3>
          <p>{recommendation}</p>
        </div>
      )}
    </div>
  );
}